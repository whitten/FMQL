FMQL ;CG/CD - Caregraf - FMQL Query Processor Entry Point; 11.13.2013  11:30
 ;;1.1;FMQL;;Nov 13th, 2013
 ;
 ; FMQL Query Processor Entry Point
 ; 
 ; FMQL Query Processor (c) Caregraf 2010-2013 AGPL
 ; 
 ;
 ; Process Query
 ; support RPC or Web serializing friendly ^TMP holding JSON response 
 ; example: QUERY(.REPLY,"DESCRIBE 2-9") will describe the 9th entry in
 ; file 2 into ^TMP($J,"FMQLJSON")
 ; 
QUERY(REPLY,QUERY) ;
 N PARAMS,PRSRES
 ; Note: storing in TMP for large JSON and older Cache-based systems
 K ^TMP($J,"FMQLJSON")  ; VistA Coding Convention
 ; Need to identify namespace of FM (VISTA or C***)
 K ^TMP($J,"NS") S ^TMP($J,"NS")=$S($P(^DIC(4.3,0),"^")="KERNEL SITE PARAMETERS":"C***",1:"VS")
 S PRSRES=$$PRSQUERY(QUERY,.PARAMS)
 I PRSRES'="" S ^TMP($J,"FMQLJSON",0)="{""error"":""Bad Query Form: "_PRSRES_"""}"
 E  D PROCQRY^FMQLQP($NA(^TMP($J,"FMQLJSON")),.PARAMS)
 S REPLY=$NA(^TMP($J,"FMQLJSON"))
 Q
 ; 
 ;
 ; PRSQUERY
 ; - invoke by S RESULT=$$PRSQUERY(INPUT,.PARAMS)
 ; ... returns a parse error when the INPUT is invalid, otherwise ""
 ;
 ; TODO: 
 ; - fully 'eat' input
 ; - support SELECT fld FROM fid
 ; - ) inside filter (last ))
 ; - default values (noidxmax, cstop)
 ; - move unescape for HTTP out of here (responsibility of stack)
 ;
PRSQUERY(INPUT,PARAMS)
 N ERROR,QRYDEFS,OP,VAL,QUAL,TOKEN,NSTRT,NEND,INPUTTV,CHECK
 S ERROR=""
 S QRYDEFS("SELECT","TYPE","LIMIT")="NUM"
 S QRYDEFS("SELECT","TYPE","OFFSET")="NUM"
 S QRYDEFS("SELECT","TYPE","AFTERIEN")="NUM"
 S QRYDEFS("SELECT","TYPE","NOIDXMAX")="NUM"
 S QRYDEFS("COUNT","TYPE","LIMIT")="NUM"
 S QRYDEFS("COUNT","TYPE","OFFSET")="NUM"
 S QRYDEFS("COUNT","TYPE","AFTERIEN")="NUM"
 S QRYDEFS("COUNT","TYPE","NOIDXMAX")="NUM"
 S QRYDEFS("COUNT REFS","QID")=""
 S QRYDEFS("DESCRIBE","QID","CSTOP")="NUM"
 S QRYDEFS("DESCRIBE","TYPE","LIMIT")="NUM"
 S QRYDEFS("DESCRIBE","TYPE","OFFSET")="NUM"
 S QRYDEFS("DESCRIBE","TYPE","AFTERIEN")="NUM"
 S QRYDEFS("DESCRIBE","TYPE","CSTOP")="NUM"
 S QRYDEFS("DESCRIBE","TYPE","NOIDXMAX")="NUM"
 S QRYDEFS("DESCRIBE","TYPE","IN")="QID"
 S QRYDEFS("SELECT TYPES","NONE","TOPONLY")=""
 S QRYDEFS("SELECT TYPES","NONE","POPONLY")=""
 S QRYDEFS("SELECT TYPE REFS","TYPE")=""
 S QRYDEFS("DESCRIBE BADTYPES","NONE")=""
 S QRYDEFS("DESCRIBE TYPE","TYPE","FULL")=""
 ; Account for %20 if query over HTTP is not unescaped
 D UNESCSP(.INPUT)
 ; OP must be at start and can have spaces so loop to find
 D SKPWHITE(.INPUT)
 ; Go through all OPs each time - longest at end of list
 S OP="" F  S OP=$O(QRYDEFS(OP)) Q:OP=""  D
 . S VAL=$E(INPUT,1,$L(OP))
 . ; Either space is next or OP takes up whole input
 . Q:'($L(OP)=$L(INPUT)!($A(INPUT,$L(OP)+1)=32))
 . I VAL=OP S PARAMS("FOP")=OP S PARAMS("OP")=$$EXTTOINT(OP) Q
 I '$D(PARAMS("OP")) S ERROR="OP MISSING"
 Q:ERROR'="" ERROR
 S OP=PARAMS("FOP")
 D EATINP(.INPUT,OP)
 S QUAL="NONE"
 I '$D(QRYDEFS(OP,"NONE")) D
 . S VAL=$$PRSINP(.INPUT)
 . ; QID form ends in E to allow for non numeric 'meaningful' IENs
 . I $D(QRYDEFS(OP,"QID")),VAL?0.N0.1"_"1.N1"-"1.E S PARAMS("TYPE")=$P(VAL,"-",1) S QUAL="QID" S PARAMS("ID")=$P(VAL,"-",2) Q
 . I $D(QRYDEFS(OP,"TYPE")),VAL?0.N0.1"_"1.N S QUAL="TYPE" S PARAMS("TYPE")=VAL Q  
 . S ERROR="TYPE MISSING"
 Q:ERROR'="" ERROR
 ; Take out FILTER text before looking at other arguments. It may contain those arguments as keywords. NOIDXMAX is a proxy for FILTER support.
 I $D(QRYDEFS(OP,QUAL,"NOIDXMAX")) D
 . S NSTRT=$F(INPUT,"FILTER")
 . Q:NSTRT=0
 . ; TODO: allow embedded brackets
 . S NEND=$F(INPUT,")",NSTRT)
 . I NEND=0 S ERROR="FILTER ) MISSING" Q
 . S VAL=$E(INPUT,NSTRT,NEND-1)
 . D SKPWHITE(.VAL)
 . I $E(VAL,1)'="(" S ERROR="FILTER ( MISSING" Q
 . S PARAMS("FILTER")=$E(VAL,2,$L(VAL)-1) ; less brackets
 . ; Redo INPUT to remove FILTER entirely
 . S INPUT=$E(INPUT,1,NSTRT-$L("FILTER")-1)_$E(INPUT,NEND,$L(INPUT))
 Q:ERROR'="" ERROR
 S TOKEN="" F  S TOKEN=$O(QRYDEFS(OP,QUAL,TOKEN)) Q:TOKEN=""!(ERROR'="")  D
 . S NSTRT=$F(INPUT,TOKEN)
 . Q:NSTRT=0  ; TOKEN not found  
 . ; TOKEN only argument - by convention make value = 1
 . I QRYDEFS(OP,QUAL,TOKEN)="" S PARAMS(TOKEN)=1 Q
 . S INPUTTV=$E(INPUT,NSTRT,$L(INPUT))  ; There is an argument
 . S VAL=$$PRSINP(.INPUTTV," ",0)
 . S CHECK=$S(QRYDEFS(OP,QUAL,TOKEN)="NUM":VAL?1.N,QRYDEFS(OP,QUAL,TOKEN)="QID":VAL?0.N0.1"_"1.N1"-"1.N,1:1)
 . I CHECK=0 S ERROR="INVALID VALUE FOR "_TOKEN Q
 . S PARAMS($$EXTTOINT(TOKEN))=VAL
 Q:ERROR'="" ERROR
 Q ""
 ;
 ; 
 ; TODO: internal code uses slightly different names for some parameters
 ;
EXTTOINT(EXTNAME)
 I EXTNAME="SELECT TYPES" Q "SELECTTYPES"
 I EXTNAME="SELECT TYPE REFS" Q "SELECTTYPEREFS"
 I EXTNAME="DESCRIBE TYPE" Q "DESCRIBETYPE"
 I EXTNAME="COUNT REFS" Q "COUNTREFS"
 I EXTNAME="NOIDXMAX" Q "NOIDXMX"
 I EXTNAME="CSTOP" Q "CNODESTOP"
 Q EXTNAME
 ;
 ;
 ; 
 ;
PRSINP(INPUT,SEP,EAT)
 N VAL
 S:'$D(SEP) SEP=" "
 S:'$D(EAT) EAT=1
 D SKPWHITE(.INPUT)
 S VAL=$P(INPUT,SEP,1)
 I EAT D EATINP(.INPUT,VAL)
 Q VAL
 ;
 ;
 ;
 ;
EATINP(INPUT,VAL)
 S INPUT=$E(INPUT,$L(VAL)+1,$L(INPUT))
 Q
 ;
 ;
 ;
 ;
SKPWHITE(INPUT)
 N IDX,NEXT,DONE
 S IDX=1
 S DONE=0 F  D  Q:DONE
 . S NEXT=$E(INPUT,IDX)
 . I NEXT="" S DONE=1 Q
 . I $A(NEXT)>32 S DONE=1 Q
 . S IDX=IDX+1
 Q:IDX=1
 S INPUT=$E(INPUT,IDX,$L(INPUT))
 Q
 ;
UNESCSP(INPUT)
 N NEXT,DONE
 S DONE=0 F  D  Q:DONE
 . S NEXT=$F(INPUT,"%20")
 . I NEXT=0 S DONE=1 Q
 . S INPUT=$E(INPUT,1,NEXT-4)_" "_$E(INPUT,NEXT,$L(INPUT))
 Q
 ;
 ; Basic Test for Query parser
 ;
TEST
 N QUERY,PARAMS
 ; Two birds test: first op name is valid but rest isn't
 S QUERY="DESCRIBEX NONSENSE AND MORE"
 S ERROR=$$PRSQUERY(QUERY,.PARAMS)
 I ERROR="" W "0. "_QUERY_" - FAIL: NO EXPECTED ERROR",! Q
 W "0. "_QUERY_" - SUCCESS - "_ERROR,!
 S QUERY="SELECT 2"
 S ERROR=$$PRSQUERY(QUERY,.PARAMS)
 I ERROR'="" W "1. UNEXPECTED ERROR - "_ERROR,! Q
 I $G(PARAMS("OP"))'="SELECT" W "1. BAD OP",! Q
 I $G(PARAMS("TYPE"))'=2 W "1. BAD TYPE",! Q
 W "1. "_QUERY_" - SUCCESS",!
 S QUERY="DESCRIBE 2-1"
 K PARAMS
 S ERROR=$$PRSQUERY(QUERY,.PARAMS)
 I ERROR'="" W "2. UNEXPECTED ERROR - "_ERROR,! Q
 I $G(PARAMS("OP"))'="DESCRIBE" W "2. BAD OP",! Q
 I $G(PARAMS("TYPE"))'=2 W "2. BAD TYPE",! Q
 I $G(PARAMS("ID"))'=1 W "2. BAD ID",! Q
 W "2. "_QUERY_" - SUCCESS",!
 S QUERY="SELECT 2 LIMIT 100 OFFSET 10"
 K PARAMS
 S ERROR=$$PRSQUERY(QUERY,.PARAMS)
 I ERROR'="" W "3. UNEXPECTED ERROR - "_ERROR,! Q
 I $G(PARAMS("OP"))'="SELECT" W "3. BAD OP",! Q
 I $G(PARAMS("TYPE"))'=2 W "3. BAD TYPE",! Q
 I $G(PARAMS("LIMIT"))'=100 W "3. BAD LIMIT",! Q
 I $G(PARAMS("OFFSET"))'=10 W "3. BAD OFFSET",! Q
 W "3. "_QUERY_" - SUCCESS",!
 ; Non numeric LIMIT is an ERROR
 S QUERY="SELECT 2 LIMIT 100X"
 K PARAMS
 S ERROR=$$PRSQUERY(QUERY,.PARAMS)
 I ERROR="" W "4. "_QUERY_" - FAIL: NO EXPECTED ERROR",! Q
 W "4. "_QUERY_" - SUCCESS - "_ERROR,!
 S QUERY="DESCRIBE 2-1 CSTOP 100"
 K PARAMS
 S ERROR=$$PRSQUERY(QUERY,.PARAMS)
 I ERROR'="" W "5. UNEXPECTED ERROR - "_ERROR,! Q
 I $G(PARAMS("CNODESTOP"))'=100 W "5. CSTOP not parsed to I Name",! Q
 W "5. "_QUERY_" - SUCCESS",!
 ; No type or ID
 S QUERY="SELECT LIMIT 100"
 K PARAMS
 S ERROR=$$PRSQUERY(QUERY,.PARAMS)
 I ERROR="" W "6. "_QUERY_" - FAIL: NO EXPECTED ERROR",! Q
 W "6. "_QUERY_" - SUCCESS - "_ERROR,!
 S QUERY="SELECT 2 LIMIT"
 K PARAMS
 S ERROR=$$PRSQUERY(QUERY,.PARAMS)
 I ERROR="" W "7. "_QUERY_" - FAIL: NO EXPECTED ERROR",! Q
 W "7. "_QUERY_" - SUCCESS - "_ERROR,!
 S QUERY="SELECT TYPES"
 K PARAMS
 S ERROR=$$PRSQUERY(QUERY,.PARAMS)
 I ERROR'="" W "8. UNEXPECTED ERROR - "_ERROR,! Q
 I $G(PARAMS("OP"))'="SELECTTYPES" W "8. OP not correct: "_$G(PARAMS("OP")),! Q
 W "8. "_QUERY_" - SUCCESS",!
 S QUERY="SELECT TYPES TOPONLY POPONLY"
 K PARAMS
 S ERROR=$$PRSQUERY(QUERY,.PARAMS)
 I ERROR'="" W "9. UNEXPECTED ERROR - "_ERROR,! Q
 I $G(PARAMS("TOPONLY"))'=1 W "9. TOPONLY not set",! Q
 I $G(PARAMS("POPONLY"))'=1 W "9. POPONLY not set",! Q
 W "9. "_QUERY_" - SUCCESS",!
 S QUERY="DESCRIBE 63_04 IN 63-4 LIMIT 10"
 K PARAMS
 S ERROR=$$PRSQUERY(QUERY,.PARAMS)
 I ERROR'="" W "9. UNEXPECTED ERROR - "_ERROR,! Q
 I $G(PARAMS("IN"))'="63-4" W "10. IN Not Taken",! Q
 I $G(PARAMS("TYPE"))'="63_04" W "10. TYPE Not Taken",! Q
 I $G(PARAMS("LIMIT"))'=10 W "10. LIMIT Not Taken",! Q
 W "10. "_QUERY_" - SUCCESS",!
 S QUERY="DESCRIBE TYPE 2"
 K PARAMS
 S ERROR=$$PRSQUERY(QUERY,.PARAMS)
 I ERROR'="" W "11. UNEXPECTED ERROR - "_ERROR,! Q
 I $G(PARAMS("FOP"))'="DESCRIBE TYPE" W "11. OP Incorrect",! Q
 I $G(PARAMS("TYPE"))'=2 W "11. TYPE Wrong",! Q
 W "11. "_QUERY_" - SUCCESS",!
 ; Testing keyword inclusion in filter is taken care of
 S QUERY="SELECT 2 LIMIT 100 FILTER (.02=OFFSET) OFFSET 10"
 K PARAMS
 S ERROR=$$PRSQUERY(QUERY,.PARAMS)
 I ERROR'="" W "12. UNEXPECTED ERROR - "_ERROR,! Q
 I $G(PARAMS("OP"))'="SELECT" W "12. BAD OP",! Q
 I $G(PARAMS("TYPE"))'=2 W "12. BAD TYPE",! Q
 I $G(PARAMS("LIMIT"))'=100 W "12. BAD LIMIT",! Q
 I $G(PARAMS("OFFSET"))'=10 W "12. BAD OFFSET",! Q
 I $G(PARAMS("FILTER"))'=".02=OFFSET" W "12. BAD FILTER",! Q
 W "12. "_QUERY_" - SUCCESS",!
 S QUERY="SELECT 2 LIMIT 100 FILTER(.02=2-9) OFFSET 10"
 K PARAMS
 S ERROR=$$PRSQUERY(QUERY,.PARAMS)
 I ERROR'="" W "13. UNEXPECTED ERROR - "_ERROR,! Q
 I $G(PARAMS("FILTER"))'=".02=2-9" W "13. BAD FILTER",! Q
 W "13. "_QUERY_" - SUCCESS",!
 S QUERY="SELECT 2 FILTER(.02=2-9)"
 K PARAMS
 S ERROR=$$PRSQUERY(QUERY,.PARAMS)
 I ERROR'="" W "14. UNEXPECTED ERROR - "_ERROR,! Q
 I $G(PARAMS("FILTER"))'=".02=2-9" W "14. BAD FILTER",! Q
 W "14. "_QUERY_" - SUCCESS",!
 S QUERY="SELECT 2 FILTER(.02=2-9"
 K PARAMS
 S ERROR=$$PRSQUERY(QUERY,.PARAMS)
 I ERROR="" W "15. "_QUERY_" - FAIL: NO EXPECTED ERROR",! Q
 W "15. "_QUERY_" - SUCCESS - "_ERROR,!
 S QUERY="SELECT 2 FILTER .02=2-9)"
 K PARAMS
 S ERROR=$$PRSQUERY(QUERY,.PARAMS)
 I ERROR="" W "16. "_QUERY_" - FAIL: NO EXPECTED ERROR",! Q
 W "16. "_QUERY_" - SUCCESS - "_ERROR,!
 S QUERY="DESCRIBE%202%20LIMIT%202"
 K PARAMS
 S ERROR=$$PRSQUERY(QUERY,.PARAMS)
 I ERROR'="" W "17. UNEXPECTED ERROR - "_ERROR,! Q
 W "17. "_QUERY_" - SUCCESS",!
 Q
